test compile precise-output
set unwind_info=false
target riscv64


function %fmadd_f32(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
    v3 = fma v0, v1, v2
    return v3
}

; VCode:
; block0:
;   fmadd.s fa0,fa0,fa1,fa2,rne
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fmadd.s fa0, fa0, fa1, fa2, rne
;   ret

function %fmadd_f64(f64, f64, f64) -> f64 {
block0(v0: f64, v1: f64, v2: f64):
    v3 = fma v0, v1, v2
    return v3
}

; VCode:
; block0:
;   fmadd.d fa0,fa0,fa1,fa2,rne
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fmadd.d fa0, fa0, fa1, fa2, rne
;   ret


function %fmsub_f32(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
    v3 = fneg v2
    v4 = fma v0, v1, v3
    return v4
}

; VCode:
; block0:
;   fmsub.s fa0,fa0,fa1,fa2,rne
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fmsub.s fa0, fa0, fa1, fa2, rne
;   ret

function %fmsub_f64(f64, f64, f64) -> f64 {
block0(v0: f64, v1: f64, v2: f64):
    v3 = fneg v2
    v4 = fma v0, v1, v3
    return v4
}

; VCode:
; block0:
;   fmsub.d fa0,fa0,fa1,fa2,rne
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fmsub.d fa0, fa0, fa1, fa2, rne
;   ret

function %fnmsub_f32(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
    v3 = fneg v0
    v4 = fma v3, v1, v2
    return v4
}

; VCode:
; block0:
;   fnmsub.s fa0,fa0,fa1,fa2,rne
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fnmsub.s fa0, fa0, fa1, fa2, rne
;   ret

function %fnmsub_f64(f64, f64, f64) -> f64 {
block0(v0: f64, v1: f64, v2: f64):
    v3 = fneg v0
    v4 = fma v3, v1, v2
    return v4
}

; VCode:
; block0:
;   fnmsub.d fa0,fa0,fa1,fa2,rne
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fnmsub.d fa0, fa0, fa1, fa2, rne
;   ret

function %fnmadd_f32(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
    v3 = fneg v0
    v4 = fneg v2
    v5 = fma v3, v1, v4
    return v5
}

; VCode:
; block0:
;   fnmadd.s fa0,fa0,fa1,fa2,rne
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fnmadd.s fa0, fa0, fa1, fa2, rne
;   ret

function %fnmadd_f64(f64, f64, f64) -> f64 {
block0(v0: f64, v1: f64, v2: f64):
    v3 = fneg v0
    v4 = fneg v2
    v5 = fma v3, v1, v4
    return v5
}

; VCode:
; block0:
;   fnmadd.d fa0,fa0,fa1,fa2,rne
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fnmadd.d fa0, fa0, fa1, fa2, rne
;   ret

